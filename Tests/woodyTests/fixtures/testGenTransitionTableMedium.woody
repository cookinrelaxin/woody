# Adopted from https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID410

# Note that although the above reference notes only token classes of identifier,
# keyword, punctuation, literal, and operator, it states that whitespace is also
# consumed by the parser, so we include it as a token class.

# We declare all the token classes up front, for convenience.  A rule may be
# declared more than once as long as each declaration is identical. Tokens
# classes are indicated by the "=>" arrow. Rules using the "->" arrow are for
# convenience.
#
# The order in which a token rule first appears determines its precendece. For
# example, according to this grammar, keywords are a strict subset of
# identifiers, so in order to make sure that keywords are analyzed as keywords,
# they must be given higher precedence. This is an additional benefit of
# summarizing all token rules up front.

# Keywords

associatedtype_kw      => "associatedtype";
class_kw               => "class";
deinit_kw              => "deinit";
enum_kw                => "enum";
extension_kw           => "extension";
fileprivate_kw         => "fileprivate";
func_kw                => "func";
import_kw              => "import";
init_kw                => "init";
inout_kw               => "inout";
internal_kw            => "internal";
let_kw                 => "let";
open_kw                => "open";
operator_kw            => "operator";
private_kw             => "private";
protocol_kw            => "protocol";
public_kw              => "public";
static_kw              => "static";
struct_kw              => "struct";
subscript_kw           => "subscript";
typealias_kw           => "typealias";
var_kw                 => "var";
break_kw               => "break";
case_kw                => "case";
continue_kw            => "continue";
default_kw             => "default";
defer_kw               => "defer";
do_kw                  => "do";
else_kw                => "else";
fallthrough_kw         => "fallthrough";
for_kw                 => "for";
guard_kw               => "guard";
if_kw                  => "if";
in_kw                  => "in";
repeat_kw              => "repeat";
return_kw              => "return";
switch_kw              => "switch";
where_kw               => "where";
while_kw               => "while";
as_kw                  => "as";
any_kw                 => "Any";
catch_kw               => "catch";
false_kw               => "false";
is_kw                  => "is";
nil_kw                 => "nil";
rethrows_kw            => "rethrows";
super_kw               => "super";
lc_self_kw             => "self";
uc_self_kw             => "Self";
throw_kw               => "throw";
throws_kw              => "throws";
true_kw                => "true";
try_kw                 => "try";
underscore_kw          => '_;
hash_available_kw      => "#available";
hash_colorLiteral_kw   => "#colorLiteral";
hash_column_kw         => "#column";
hash_else_kw           => "#else";
hash_elseif_kw         => "#elseif";
hash_endif_kw          => "#endif";
hash_file_kw           => "#file";
hash_fileLiteral_kw    => "#fileLiteral";
hash_function_kw       => "#function";
hash_if_kw             => "#if";
hash_imageLiteral_kw   => "#imageLiteral";
hash_line_kw           => "#line";
hash_selector_kw       => "#selector";
hash_sourceLocation_kw => "#sourceLocation";
associativity_kw       => "associativity";
convenience_kw         => "convenience";
dynamic_kw             => "dynamic";
didSet_kw              => "didSet";
final_kw               => "final";
get_kw                 => "get";
infix_kw               => "infix";
indirect_kw            => "indirect";
lazy_kw                => "lazy";
left_kw                => "left";
mutating_kw            => "mutating";
none_kw                => "none";
nonmutating_kw         => "nonmutating";
optional_kw            => "optional";
override_kw            => "override";
postfix_kw             => "postfix";
precedence_kw          => "precedence";
prefix_kw              => "prefix";
protocol_kw            => "Protocol";
required_kw            => "required";
right_kw               => "right";
set_kw                 => "set";
type_kw                => "Type";
unowned_kw             => "unowned";
weak_kw                => "weak";
willSet_kw             => "willSet";

# Punctuation

left_parenthesis_punc  => '(;
right_parenthesis_punc => ');
left_brace_punc        => '{;
right_brace_punc       => '};
left_bracket_punc      => '[;
right_bracket_punc     => '];
period_punc            => '.;
comma_punc             => ',;
colon_punc             => ':;
semicolon_punc         => ';;
equals_punc            => '=;
at_punc                => '@;
hash_punc              => '#;
ampersand_punc         => '&;
arrow_punc             => "->";
backtick_punc          => '`;
question_punc          => '?;
exclamation_punc       => '!;

### Whitespace

whitespace => whitespace_item+;

## We may, in Backus-Naur style, declare the different cases of a rule using the
## arrow syntax on different lines.
#
## Note that identifiers may not contain '-'. Use '_' instead.

whitespace_item -> line_break;
whitespace_item -> comment;
whitespace_item -> multiline_comment;
whitespace_item -> { u0000, u0009, u000B, u000C, u0020 };

line_break -> u000A;
line_break -> u000D;
line_break -> u000D u000A;

# Note that "//" is equivalent to "/" "/".

comment           -> "//" comment_text line_break;
multiline_comment -> "/*" comment_text "*/";
comment_text       -> comment_text_item+;

## Here we specify the set of all characters which are not u000A or u000D.
comment_text_item -> U \ { u000A, u000D };

## Note that the reference specifies the following line,
##   multiline-comment_text_item -> Any Unicode scalar value except /*  or */;
## but enforcing balanced comment delimiters is strictly the responsibility of
## the parser, so we do not include it here.
#
### Identifiers

identifier => identifier_head identifier_character*;
identifier -> '` identifier_head identifier_character* '`;
identifier -> implicit_parameter_name;

## We can specify a range of characters with '-'.
identifier_head -> 'a-'z | 'A-'Z;
identifier_head -> '_;

## Note that technically, a character specified like 'u00A8 or 'a, actually
## specifies the set containing that character. Hence u00B2-u00B5 specifies the
## set containing all characters c such that u00B2 <= c <= u00B5. And the { ... }
## construct forms the union of its contents.

identifier_head -> { u00A8, u00AA, u00AF, u00B2-u00B5, u00B7-u00BA,
                     u00BC-u00BE, u00C0-u00D6, u00D8-u00F6, u00F8-u00FF,
                     u0100-u02FF, u0370-u167F, u1681-u180D, u180F-u1DBF,
                     u1E00-u1FFF,
                     u200B-u200D, u202A-u202E, u203F-u2040, u2054, u2060-u206F,
                     u2070-u20CF, u2100-u218F, u2460-u24FF, u2776-u2793,
                     u2C00-u2DFF, u2E80-u2FFF,
                     u3004-u3007, u3021-u302F, u3031-u303F, u3040-uD7FF,
                     uF900-uFD3D, uFD40-uFDCF, uFDF0-uFE1F, uFE30-uFE44,
                     uFE47-uFFFD,
                     u10000-u1FFFD, u20000-u2FFFD, u30000-u3FFFD, u40000-u4FFFD,
                     u50000-u5FFFD, u60000-u6FFFD, u70000-u7FFFD, u80000-u8FFFD,
                     u90000-u9FFFD, uA0000-uAFFFD, uB0000-uBFFFD, uC0000-uCFFFD,
                     uD0000-uDFFFD, uE0000-uEFFFD
                   };

## So the identifier_head rule above is identical to
# identifier_head -> u00A8 | u00AA | u00AD | u00AF | u00B2-u00B5 | u00B7-u00BA
#                  | u00BC-u00BE | u00C0-u00D6 | u00D8-u00F6 | u00F8-u00FF
#                  | u0100-u02FF | u0370-u167F | u1681-u180D | u180F-u1DBF
#                  | u1E00-u1FFF
#                  | u200B-u200D | u202A-u202E | u203F-u2040 | u2054 | u2060-u206F
#                  | u2070-u20CF | u2100-u218F | u2460-u24FF | u2776-u2793
#                  | u2C00-u2DFF u2E80-u2FFF
#                  | u3004-u3007 | u3021-u302F | u3031-u303F | u3040-uD7FF
#                  | uF900-uFD3D | uFD40-uFDCF | uFDF0-uFE1F | uFE30-uFE44
#                  | uFE47-uFFFD
#                  | u10000-u1FFFD | u20000-u2FFFD | u30000-u3FFFD | u40000-u4FFFD
#                  | u50000-u5FFFD | u60000-u6FFFD | u70000-u7FFFD | u80000-u8FFFD
#                  | u90000-u9FFFD | uA0000-uAFFFD | uB0000-uBFFFD | uC0000-uCFFFD
#                  | uD0000-uDFFFD uE0000-uEFFFD

identifier_character    -> decimal_digit;
identifier_character    -> u0300-u036F | u1DC0-u1DFF | u20D0-u20FF
                         | uFE20-uFE2F;
identifier_character    -> identifier_head;
implicit_parameter_name -> '$ decimal_digit+;

# Literals
# Integer Literals

integer_literal => '-? unsigned_literal;

unsigned_literal -> binary_literal | octal_literal | decimal_literal
                  | hexadecimal_literal;

binary_literal -> "0b" binary_digit binary_literal_character*;
binary_digit -> { '0, '1 };
binary_literal_character -> binary_digit | '_;

octal_literal -> "0o" octal_digit octal_literal_character*;
octal_digit -> binary_digit | '2 - '7;
octal_literal_character -> octal_digit | '_;

decimal_literal -> decimal_digit decimal_literal_character*;
decimal_digit -> octal_digit | { '8, '9 };
decimal_literal_character -> decimal_digit | '_;

hexadecimal_literal -> "0x" hexadecimal_digit hexadecimal_literal_character*;
hexadecimal_digit -> decimal_digit | { 'a - 'f, 'A - 'F };
hexadecimal_literal_character -> hexadecimal_digit | '_;

# Floating-point literals

floating_point_literal => decimal_floating_point_literal
                        | hexadecimal_floating_point_literal;

decimal_floating_point_literal -> decimal_literal decimal_fraction;
decimal_floating_point_literal -> decimal_literal decimal_exponent;
decimal_floating_point_literal -> decimal_literal decimal_fraction decimal_exponent;

hexadecimal_floating_point_literal -> hexadecimal_literal hexadecimal_fraction;
hexadecimal_floating_point_literal -> hexadecimal_literal hexadecimal_exponent;
hexadecimal_floating_point_literal -> hexadecimal_literal hexadecimal_fraction
                                      hexadecimal_exponent;

decimal_fraction -> '. decimal_literal;
decimal_exponent -> floating_point_e sign? decimal_literal;

hexadecimal_fraction -> '. hexadecimal_digit hexadecimal_literal_character*;
hexadecimal_exponent -> floating_point_p sign? decimal_literal;

floating_point_e -> 'e | 'E;
floating_point_p -> 'p | 'P;

sign -> '+ | '-;

# String literals

string_literal => static_string_literal | interpolated_string_literal;

static_string_literal -> '" quoted_text? '";
static_string_literal -> '" '" '" multiline_quoted_text? '" '" '";

quoted_text -> quoted_text_item+;
quoted_text_item -> escaped_character;
quoted_text_item -> . \ { '", '\, uA, uD };

multiline_quoted_text -> multiline_quoted_text_item+;
multiline_quoted_text_item -> escaped_character;
multiline_quoted_text_item -> . \ '\;
multiline_quoted_text_item -> escaped_newline;

interpolated_string_literal -> '" interpolated_text? '";
interpolated_string_literal -> '" '" '" multiline_interpolated_text? '" '" '";
interpolated_text -> interpolated_text_item+;
interpolated_text_item -> "\(" expression ")" quoted_text_item;

# This is a stub until we define expressions in the grammar
expression -> identifier;

multiline_interpolated_text -> multiline_interpolated_text_item+;
multiline_interpolated_text_item -> "\(" expression ")" multiline_quoted_text_item;

escaped_character -> "\0" | "\\" | "\t" | "\n" | "\r" | '\ '" | "\'";
escaped_character -> "\u{" unicode_scalar_digits '};

hd -> hexadecimal_digit;

unicode_scalar_digits -> hd
                       | hd hd
                       | hd hd hd
                       | hd hd hd hd
                       | hd hd hd hd hd
                       | hd hd hd hd hd hd
                       | hd hd hd hd hd hd hd
                       | hd hd hd hd hd hd hd hd;

escaped_newline -> '\ whitespace? line_break;

# Operators

operator => operator_head operator_character*;
operator => dot_operator_head dot_operator_character*;

operator_head -> { '/, '=, '-, '+, '!, '*, '%, '<, '>, '&, '|, '^, '~, '? };
operator_head -> u00A1-u00A7;
operator_head -> u00A9 | u00AB;
operator_head -> u00AC | u00AE;
operator_head -> { u00B0-u00B1, u00B6, u00BB, u00BF, u00D7, u00F7 };
operator_head -> u2016-u2017 | u2020-u2027;
operator_head -> u2030-u203E;
operator_head -> u2041-u2053;
operator_head -> u2055-u205E;
operator_head -> u2190-u23FF;
operator_head -> u2500-u2775;
operator_head -> u2794-u2BFF;
operator_head -> u2E00-u2E7F;
operator_head -> u3001-u3003;
operator_head -> u3008-u3030;

operator_character -> operator_head;
operator_character -> u0300-u036F;
operator_character -> u1DC0-u1DFF;
operator_character -> u20D0-u20FF;
operator_character -> uFE00-uFE0F;
operator_character -> uFE20-uFE2F;
operator_character -> uE0100-uE01EF;

dot_operator_head -> '.;

dot_operator_character -> '. operator_character;

binary_operator -> operator;

prefix_operator -> operator;

postfix_operator -> operator;
